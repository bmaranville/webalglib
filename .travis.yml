# Note: It seems that cache doesn't work when "sudo: required". :(
sudo: required
dist: trusty
language: node_js

# safelist
branches:
  only:
  - master
  - stable

env:
  global:
    - PROJ_NAME=webalglib

before_install:
  openssl aes-256-cbc -K $encrypted_18fb29e1166b_key -iv $encrypted_18fb29e1166b_iv -in webalglib_deploy.enc -out /tmp/webalglib_deploy -d

install:
  # Download and verify alpine-chroot-install script.
  - wget https://raw.githubusercontent.com/alpinelinux/alpine-chroot-install/v0.2.0/alpine-chroot-install
      && echo '7c6f0550f02d853d7275cfa82529e62a3a09d629  alpine-chroot-install' | sha1sum -c
  # Install Alpine Linux into /alpine and prepare there a chroot environment;
  # use branch edge (i.e. unstable), add testing repository and install
  # packages for Emscripten.
  - sudo sh alpine-chroot-install -b edge
      -r 'https://nl.alpinelinux.org/alpine/edge/testing'
      -p emscripten -p emscripten-libs-asmjs -p closure-compiler
      -p make
  

script:
  - mkdir -p target/debug target/release
  # Compile hello_world.c into JavaScript inside the Alpine chroot.
  # EM_USE_GLOBAL_CACHE=1 tells emscripten to use precompiled libraries from
  # the emscripten-libs-asmjs package. This speeds up the build significantly.
  #- /alpine/enter-chroot $USER
  #    EM_USE_GLOBAL_CACHE=1 emcc -O0 -g4 -o target/debug/$PROJ_NAME.js hello_world.c
  - /alpine/enter-chroot $USER
      EM_USE_GLOBAL_CACHE=1 make
  # Try to run the created JS file with nodejs on the host system (Ubuntu Trusty).
  #- node target/debug/$PROJ_NAME.js
  #- node target/release/$PROJ_NAME.js

before_deploy:
  - openssl aes-256-cbc -K $encrypted_18fb29e1166b_key -iv $encrypted_18fb29e1166b_iv -in webalglib_deploy.enc -out /tmp/webalglib_deploy -d
  - eval "$(ssh-agent -s)"
  - chmod 600 /tmp/webalglib_deploy
  - ssh-add /tmp/webalglib_deploy

deploy:
  provider: script
  skip_cleanup: true
  script: git commit . -m "build from Travis-CI"; git push origin gh-pages
  on:
    branch: master
